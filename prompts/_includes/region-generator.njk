
{% set mode = mode or 'full' %}
{% set isStub = mode == 'stub' %}
{% set includeLocations = mode in ['full', 'stub'] %}
{% set includeConnections = mode != 'locations' %}

<task>
{% if isStub %}
You are creating the region "{% if isStub %}{{ currentRegion.name }}{% else %}{{ regionName }}{% endif %}" described briefly below. Invent **new** locations that fit naturally within this region, without duplicating existing locations. Use judgments on how many new locations are appropriate (generally between {{ minLocations }} and {{ maxLocations }}, with larger places such as cities warranting more). Respect the established tone, geography, and level range. Describe how each new location connects to other locations in this region, explaining why those exits make sense. After defining the new locations, consider how this region links to other regions and propose any notable connected regions. If the region is not a building, ensure there are at least {{ minRegionExits }} non-'within' regionExit(s) among the locations.
{% elseif mode == 'exits' %}
You are analysing the current region and proposing meaningful connected regions that can be reached from it. Use the existing locations and themes to pick sensible exit points. Each connected region must include a description, a relative difficulty, the relationship (Within, Contains, Adjacent), and the location that serves as the exit.
{% else %}
Design a brand new region for the setting above. Propose between 1 and {{ maxLocations }} distinct locations that together form a coherent mini-map. Provide names, vivid three-sentence descriptions, relative levels, and explain the logic behind each intra-region exit. After the location list, suggest other regions that are reachable, contained, or containing this new region so navigation feels natural.
{% endif %}
</task>

{% if currentPlayer.previousLocation %}
For context, this region is being entered from {{ currentPlayer.previousLocation.name }} in {{ currentPlayer.previousLocation.region.name }}.
{% endif %}

{% if entryProse %}Here is how the region was described upon entry:
<entryProse>
{{ entryProse }}
</entryProse>{% endif %}


Guidelines: 
* Note that "region" is defined loosely as a set of related locations. Examples of regions can be a building, a city, a biome, a town, a dungeon, a cave system, a mountain range, etc. Regions can contain other regions or be adjacent to them. As a general rule, a building should have a location for the exterior and a regionExit for the interior. Regions can be as small as a single room building or vastly larger than that. Note that it is not necessary to generate a regionExit to the parent region, as it will already be connected; however, you may generate a regionExit to the parent region if it makes sense to have more than one.

* When proposing region exits, ensure the exit location you choose for each region makes sense given the current region's locations. For instance, if the current region is a starbase, any region that's not part of the starbase should have an exit location that is an airlock or docking bay.

* If you generate a location that would hint at a new region, generate a regionExit for that new region. For example, if you create a location called "Ancient Temple Entrance", it would make sense to have a regionExit to a new region called "Ancient Temple Interior". A cave would suggest a cave system region, building would suggest an interior, etc.

* Always avoid contradictions with the setting, and use consistent terminology (e.g., Within, Contains, Adjacent) when describing regional relationships.

* Furniture and workstations are not locations. These should be mentioned in the description, but will be generated as scenery later. For example, a "blacksmith's forge" is not a location, but a "blacksmith's workshop" is.

{% if currentRegion.name %}Output XML in the following format for the region named "{{ currentRegion.name }}".{% elseif regionName %}Output XML in the following format for a new region named "{{ regionName }}".{% else %}Create a region using the following XML format.{% endif %}

{% if minRegionExits %}If this region isn't a building, provide at least 3 non-'within' regionExit(s) among the locations, with at least 3 of them being exits to entirely new regions.{% endif %}

If this region is a city, town, village, or other settlement, create at least three building exteriors as locations, each with a regionExit for the interior.

{% if regionNotes %}Generate a region based on this description: "{{ regionNotes }}".{% endif %} Use the following XML structure exactly:

{% if includeLocations %}
<region>
  {% if regionName or currentRegion.name %}<!-- strictly retain this exact region name: -->{% endif %}
  <regionName>{% if isStub %}{{ currentRegion.name }}{% else %}{{ regionName }}{% endif %}</regionName>
  <regionDescription><!-- Three sentences that describe this region. --></regionDescription>
  <relativeLevel>1</relativeLevel>{# Set to 1 to keep the AI from going nuts with high relative levels for locations. This value doesn't affect actual generation. #}
  <locations>
{% if isStub %}
    <!-- Only list **new** locations to add to the current region -->
{% endif %}
    <!-- For each location below, follow the structure exactly once per location. -->
    <!-- If this location is a building exterior, include a regionExits element with a stubRegion for the building interior. The description for this case should be of the place around the building, not the interior itself. As a rule, the name of building interiors should be "[building name] interior" -->
    <location>
      <name>Concise, evocative location name</name>
      <description>Three sentence description emphasising sensory detail and interactive elements.</description>
      <relativeLevel>Integer from -3 to +3 relative to the region average</relativeLevel>
      <notesAboutExits>Brief explanation of which neighbouring locations this place connects to and why it makes sense.</notesAboutExits>
      <exits>
        <exit>Name of other location in region</exit>
        <!-- Repeat <exit> elements as needed; 0-4 per location is typical. -->
      </exits>
      <regionExits>
        <!-- If this location is a building exterior, list the building interior region here. Otherwise, omit this element entirely. -->
        <stubRegion type="building">
          <regionName>Name of the building</regionName>
          <regionDescription>Three sentence summary of the building.</regionDescription>
          <relativeLevel>Integer from -1 to +3 relative to the current region</relativeLevel>
          <relationshipToCurrentRegion>always "Within", because it's a building</relationshipToCurrentRegion>
          <exitVehicle>Optional; if the exit has a vehicle that ferries people to and from this destination (could be a taxi, bus, plane, starship, boat, fixed destination teleporter, mine elevator, etc, that is not controlled by the player). It should make sense in the phrase "[exitVehicle] to [exitLocation]".</exitVehicle>
        </stubRegion>
        <!-- If this location is the exit point to a connected region, list the region name(s) here. Otherwise, omit this element entirely. -->
        <stubRegion type="connectedRegion">
          <regionName>Name of the connected region</regionName>
          <regionDescription>Three sentence summary of the connected region as a whole.</regionDescription>
          <relativeLevel>Integer from -1 to +3 relative to the current region</relativeLevel>
          <relationshipToCurrentRegion>Within | Contains | Adjacent</relationshipToCurrentRegion>
        </stubRegion>
      </regionExits>
    </location>
  </locations>
  <randomStoryEvents>
    <!-- Briefly describe 10 random story events that are specifically relevant to this region (but not to specific locations within the region, as they may occur anywhere). Each event should be 1-2 sentences long. Have some be favorable, some unfavorable, and some neutral.-->
    <event>1-2 sentence description of an event]</event>
    <event>1-2 sentence description of an event]</event>
    <!-- ... more events ... -->
  </randomStoryEvents>
  <characterConcepts>
    <!-- Generate 10 interesting character concepts appropriate for this location. These are not full NPCs, just brief concepts that could be used to create NPCs later. -->
    <concept>1-2 sentence description of a character concept</concept>
    <concept>1-2 sentence description of a character concept</concept>
    ... more concepts ...
  </characterConcepts>
  <enemyConcepts>
    <!-- Generate 10 interesting enemy concepts appropriate for this location. These are not full NPCs, just brief concepts that could be used to create hostile NPCs or creatures later. -->
    <concept>1-2 sentence description of an enemy concept</concept>
    <concept>1-2 sentence description of an enemy concept</concept>
    ... more concepts ...
  </enemyConcepts>
</region>
{% endif %}
